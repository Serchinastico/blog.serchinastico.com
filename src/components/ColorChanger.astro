---
---

<script>
  function interpolateColor(color1: string, color2: string, factor: number) {
    const r1 = parseInt(color1.slice(1, 3), 16);
    const g1 = parseInt(color1.slice(3, 5), 16);
    const b1 = parseInt(color1.slice(5, 7), 16);

    const r2 = parseInt(color2.slice(1, 3), 16);
    const g2 = parseInt(color2.slice(3, 5), 16);
    const b2 = parseInt(color2.slice(5, 7), 16);

    const r = Math.round(r1 + (r2 - r1) * factor);
    const g = Math.round(g1 + (g2 - g1) * factor);
    const b = Math.round(b1 + (b2 - b1) * factor);

    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
  }

  // Color configurations for different themes
  const themeColors = {
    dark: {
      start: '#0f0f0f',
      end: '#030454'
    },
    light: {
      start: '#fffbf0',
      end: '#B2D2FB'
    }
  };

  function updateBackgroundColor() {
    const html = document.documentElement;
    const isDarkTheme = html.classList.contains('dark');
    const theme = isDarkTheme ? 'dark' : 'light';

    const scrollPosition = window.scrollY;
    const maxScroll = document.documentElement.scrollHeight - window.innerHeight;
    const scrollFactor = Math.min(scrollPosition / maxScroll, 1);

    const startColor = themeColors[theme].start;
    const endColor = themeColors[theme].end;

    html.style.backgroundColor = interpolateColor(startColor, endColor, scrollFactor);
  }

  document.addEventListener('DOMContentLoaded', () => {
    updateBackgroundColor();

    document.addEventListener('scroll', updateBackgroundColor);

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (
          mutation.type === 'attributes' &&
          mutation.attributeName === 'class'
        ) {
          updateBackgroundColor();
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
  });
</script>
